oryonatan
yulishap


Files:
Directory: actions 
Action.java 				- the actions interface
ActionsEnum.java		- enum which holds all the action class types
CopyAction.java			- an action that copies files
ExecAction.java			- an action that sets exectuion permessions
LastModAction.java	- an action that sets last modification date
PrintDataAction.java	- an action that prints all the attributes of the filtered files
PrintNameAction.java	- an action that prints the name of the filtered files
WriteAction.java 		- an action that sets write permissions

Directory: Filters
AfterFilter.java			-filter files modified after a given date
BeforeFilter.java		-filter files modified before a given date
DateFilter.java			-superclass for filters that gets date as a parameter
DoubleFilter.java		-superclass for filters that gets a double as parameter
EndsWithFilter.java	-filter files that ends with a given suffix
ExecFilter.java			-filter files based on execution premissions
FileFilterBox.java		-a collection of filters representing the filtrers in a given FILTER subsection
								in the input file
FileSizeFilter.java		-superclass for a double filter that gets a file size
FilterLine.java			-represents a line in the FILTER subsection
FiltersEnum.java		-enum which holds all the filter  class types
FolderFilter.java			-filter only folders
GreaterThanFilter.java- filter files bigger than a given file size
HiddenFilter.java		-filter files based on visibility.
NameFilter.java			-filter files by name
NegatableFilter.java	- superclass for all the filters that require negatablity
SmallerThanFilter.java- filter files smaller than a given file size
StartsWithFilter.java	-filter files that starts with a given prefix
WriteableFilter.java	-filter files by writing premissions.
YesNoFilter.java			-superclas for filters that gets YES or NO as a parameter

Directory: orders
AbsComparator.java	- a comparator that orders by full file path name
FileComparator.java	- a comparator that orders by file name
ModComparator.java	- a comparator that orders by modifiction date
OrdersEnum.java		- enum which holds all the order class types
SizeComparator.java - a comparator that orders by file size

Directory: parser
ActionParser.java 	- a parser which parses an "ACTION" subsection and generates
							actions accordingly
Block.java				- a block is an object that represents a piece of the input file , 
							it is generated by the parsers and run , by the MyFileScript main.
FilterParser.java 	- a parser which parses an "FILTER" subsection and generates
							filters accordingly
OrderParser.java	- a parser which parses an "ORDER" subsection and generates
							orders accordingly
Parser.java			- a parser which parses the command file 

Directory Excepetions:
AbsComperatorIOError.java
ArgsNumException.java
BadOrderException.java
BadParamException.java
BlockException.java
PermissionsException.java
StringCaseException.java
Directory Excepetions\ActionExceptions:
ActionCopyAbsPathException.java
ActionException.java
ActionParamSizeException.java
Directory Exceptions\FilterExceptions:
DateFilterParseException.java
DoubleFilterParseFailedException.java
YesNoFilterYesNoStringException.java
Directory Exceptions\ParserExceptions:
IlegalFilterException.java
IllegalOrderException.java
ParserException.java

Design :
The way the program works , by the most abstract level , is divided
in to two mmain parts : parsing and running.
The program main() procedure shows that, first - it 
generates an arraylist of the Block(see description below)
object accordingly to the command file , and then it calls the
run() method of each Block.

There are classes for each type of filter, order and action
available in the program, to instintiate each one of them , each parser
the parser (filter/action/order) looks in the specific enum 
for the classtype of the given object , creates a constructor
and then instanciate it with the correct parameters.
the instance will then be put inside a block part 
that should hold the filters/oreder/actions of the command file.

Parsing : 
<how we read the file>
after parsing the strings - the block is generated and added to the 
Blocks arraylist of the main method. 

Filters :
<explain the filters structure>

Actions:
<explain the actions structure>

Order:
<explain the order structure>

Exceptions : 
There are specific exceptions for various situations that might
occour during runtime, some exceptions are grouped under
some similarities.
A specific notion should be given the BadParamExcpetion type,
a superclass that most of the exceptions are inheriting from,
this exception in general is an exception that is caused by
user giving the program bad parameters, as this is the most common
cause of error.

Implementation Issues:
<explain block structure , enum blabla , Filterbox , parsers factoring objects>

How do we provide extensioability ?
Adding a filter/action/order is a fairly simple task , one should only write his class
for the specific order , and add a line with the classtype in the according enum.
The reflection mechanism used by the parsers should do the rest of the work.
